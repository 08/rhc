#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'openshift'

def usage
puts <<USAGE
== Synopsis

os-list-applications: List all applications on all running environments.

== Usage

os list-application [options] [NAME]

-u|--username
    Redhat Login (RHN or OpenShift login with OpenShift Express access)

-p|--password
    Redhat Password

-t|--target flex|express
    Choose the cloud platform to list applications for.
    
-v|--verbose
    Get application deployment history.
    
-h|--help
    Prints this message

NAME: The name of the environment to list applications for.
USAGE
end

opts = GetoptLong.new(
    ["--username",         "-u", GetoptLong::REQUIRED_ARGUMENT],
    ["--password",         "-p", GetoptLong::REQUIRED_ARGUMENT],
    ["--target",           "-t", GetoptLong::REQUIRED_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT],
    ["--debug",                  GetoptLong::NO_ARGUMENT],
    ["--sso",                    GetoptLong::REQUIRED_ARGUMENT]        
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

if args['--help']
    usage
    exit
end

@debug = true if args['--debug']
@porcelin = true if args['--porcelin']

args['--target'] = conf('default_target') || 'flex' if args['--target'].nil? or args['--target']==""
debug "Target platform #{args['--target']}"

if args['--target'] == 'flex'
    flex_server = conf('flex_server')
    environment_name = ARGV.shift
    cookie = args['--sso']
    if !cookie
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        csay("Logging into Openshift Flex as #{username}\n",:message) if not @porcelin
        cookie=Openshift.login(@http,username,password)
    end
    
    csay("Retrieving environment list... ") if not @porcelin
    environments = JSON.parse(`os-list-environments --sso "#{cookie}" --porcelin`)
    csay("[OK]",:conf) if not @porcelin
    
    environments.each{ |environment|
        if not environment_name or environment["name"].strip == environment_name.strip
            if environment['cluster-status'] != 'STOPPED' and environment['cluster-status'] != 'UNRESPONSIVE'
                Openshift::Formatter.table(["Environment Id","Name","Cloud", "DNS", "Load balanced", "Location", "State"],
                      ['id','name','cloud-account-name', 'dns', 'loadbalanced','location','cluster-status'],
                      [16,15,20,40,20,15,10],
                      [environment])

                uri = URI.parse("https://#{environment['dns']}:4242/api")
                response = Openshift::Rest.get(@http, uri, nil, nil, {'user' => environment['username'], 'password' => environment['password']})
                case response
                when Net::HTTPSuccess
                when Timeout::Error
                    csay("[ERROR]",:error) if not @porcelin
                    csay("Environment is unreachable.",:error)
                    next
                else
                    debug "HTTP code: #{response.code}"
                    debug response.body
                    csay("[ERROR]",:error) if not @porcelin
                    csay("Unable to retrieve application list for environment.",:error)
                    next
                end
                api = JSON.parse(response.body)
                unless api['version'].to_f >= 3.0
                    csay("Environment is based on an older release of OpenShift Flex. Skipping.", :warn)
                    next
                end

                list_app_link = api['links']['list-applications']
                 
                uri = URI.parse("https://#{environment['dns']}:4242/#{list_app_link['href']}")
                response = Openshift::Rest.doHttp(@http, list_app_link['method'], uri, nil, nil, {'user' => environment['username'], 'password' => environment['password']})
                case response
                when Net::HTTPSuccess
                else
                    debug "HTTP code: #{response.code}"
                    debug response.body
                    csay("[ERROR]",:error) if not @porcelin
                    csay("Unable to retrieve application list for environment.",:error)
                    next
                end
                apps = JSON.parse(response.body)
                if( apps['applications'].length > 0 )
                    csay("Applications",:message)
                    Openshift::Formatter.table(["Application GUID","Application name", "Version", "State"],
                          ['guid','name','version','status'],
                          [39,20,7,10],
                          apps["applications"],1)
                else
                    csay("    There are no applications on this environment.",:message)
                end
            end
        end
    }
else
    csay("This feature is currently not implemented for Openshift Express applications.\n",:red)    
end
