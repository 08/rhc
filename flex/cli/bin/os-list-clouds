#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'openshift'

def usage
puts <<USAGE
== Synopsis

os-list-clouds: List all applications on all running environments.

== Usage

os list-clouds [options]

-u|--username
    Redhat Login (RHN or OpenShift login with OpenShift Express access)

-p|--password
    Redhat Password

-t|--target flex|express
    The cloud platform to list cloud accounts for.
    
-h|--help
    Prints this message
USAGE
end

opts = GetoptLong.new(
    ["--username",         "-u", GetoptLong::REQUIRED_ARGUMENT],
    ["--password",         "-p", GetoptLong::REQUIRED_ARGUMENT],
    ["--sso",                    GetoptLong::REQUIRED_ARGUMENT],        
    ["--help",             "-h", GetoptLong::NO_ARGUMENT],
    ["--debug",                  GetoptLong::NO_ARGUMENT],        
    ["--porcelin",               GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

if args['--help']
    usage
    exit
end

@debug = true if args['--debug']
@porcelin = true if args['--porcelin']

target = conf('default_target') || 'flex' if args['--target'].nil? or args['--target']==""
debug "Target platform #{target}"

if target == 'flex'
    flex_server = conf('flex_server')
    
    cookie = args['--sso']
    if !cookie
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        csay("Logging into Openshift Flex as #{username}\n",:message) if not @porcelin
        cookie=Openshift.login(@http,username,password)
    end
    
    csay("Contacting Openshift Flex server... ") if not @porcelin
    uri = URI.parse("#{flex_server}/rest/api")
    response = Openshift::Rest.get(@http, uri, nil, cookie, nil)
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf) if not @porcelin
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error) if not @porcelin
        csay("Unable to contact Flex server",:error)
        exit -301
    end
    data = JSON.parse(response.body)
    list_cloud_url = data['links']['list-cloud-accounts']

    csay("Retrieving list of cloud accounts... ") if not @porcelin
    uri = URI.parse("#{flex_server}/rest/#{list_cloud_url['href']}")
    response = Openshift::Rest.doHttp(@http, list_cloud_url['method'], uri, nil, cookie, nil)
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf) if not @porcelin
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error) if not @porcelin
        csay("Unable to retrieve cloud account list",:error)
        exit -301
    end
    data = JSON.parse(response.body)
    data = data['cloud-accounts']
    id = 1
    data.each{ |cloud|
        cloud["_id"] = id
        cloud["clusters"] = nil
        id += 1
    }
    
    if args['--porcelin']
        print JSON.generate(data)
    else
        Openshift::Formatter.table(["Cloud Id","Name","Type"],
              ['id','name','provider-type'],
              [10,20,20],
              data)
    end
else
    csay("This feature is currently not implemented for Openshift Express applications.\n",:red)
end
