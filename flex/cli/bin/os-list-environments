#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'openshift'

def usage
puts <<USAGE
== Synopsis

os-list-environments: List all environments.

== Usage

os list-environments [options]

-u|--username
    Redhat Login (RHN or OpenShift login with OpenShift Express access)

-p|--password
    Redhat Password

-t|--target flex|express
    The cloud platform to list environments for.
    
-h|--help
    Prints this message
USAGE
end

opts = GetoptLong.new(
    ["--username",         "-u", GetoptLong::REQUIRED_ARGUMENT],
    ["--password",         "-p", GetoptLong::REQUIRED_ARGUMENT],
    ["--target",           "-t", GetoptLong::REQUIRED_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT],
    ["--debug",                  GetoptLong::NO_ARGUMENT],    
    ["--sso",                    GetoptLong::REQUIRED_ARGUMENT],        
    ["--porcelin",               GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

if args['--help']
    usage
    exit
end

@debug = true if args['--debug']
@porcelin = true if args['--porcelin']

args['--target'] = conf('default_target') || 'flex' if args['--target'].nil? or args['--target']==""
debug "Target platform #{args['--target']}"

if args['--target'] == 'flex'
    flex_server = conf('flex_server')
    
    cookie = args['--sso']
    if !cookie
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        csay("Logging into Openshift Flex as #{username}\n",:message) if not @porcelin
        cookie=Openshift.login(@http,username,password)
    end

    csay("Contacting Openshift Flex server... ") if not @porcelin
    uri = URI.parse("#{flex_server}/rest/api")
    response = Openshift::Rest.get(@http, uri, nil, cookie, nil)
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf) if not @porcelin
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error) if not @porcelin
        csay("Unable to contact Flex server",:error)
        exit -301
    end
    data = JSON.parse(response.body)
    list_env_url = data['links']['list-clusters']
    
    csay("Retrieving list of environments... ") if not @porcelin    
    uri = URI.parse("#{flex_server}/rest/#{list_env_url['href']}")
    response = Openshift::Rest.doHttp(@http, list_env_url['method'], uri, nil, cookie, nil)
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf) if not @porcelin
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error) if not @porcelin
        csay("Unable to retrieve environment list",:error)
        exit -301
    end
    begin
        data = JSON.parse(response.body)
        data = data['clusters']
        data.each{ |c|
            c['num-nodes'] = c['nodes'].size
        }
        if args['--porcelin']
            print JSON.generate(data)
        else
            Openshift::Formatter.table(["Environment Id","Name","Cloud", "DNS", "Load balanced", "Location", "State"],
                  ['id','name','cloud-account-name', 'dns', 'loadbalanced','location','cluster-status'],
                  [16,15,20,40,20,15,10],
                  data)
        end
    end
else
    sso_data = args['--sso']
    if !sso_data
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        sso_data = JSON.generate({"username"=>username, "password"=>password})        
    else
        sso_data = JSON.parse(sso_data)
        username = sso_data['username']
        password = sso_data['password']
    end
    
    data = {'rhlogin' => username}
    data['debug'] = "true"
    Openshift::Debug.print_post_data(data)
    json_data = JSON.generate(data)

    url = URI.parse("https://#{libra_server}/app/broker/userinfo")
    csay("Retrieving list of environments... ") if not @porcelin
    response = Openshift::Rest.post(net_http, url, {"json_data" => json_data, "password" => password})
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf) if not @porcelin
    when Net::HTTPNotFound
        csay("No Openshift Express environments found for user '#{username}'")
        csay("Be sure to run os-create-environment before using the other os tools.")
        exit -200
    when Net::HTTPUnauthorized
        csay("Invalid login credentials.")
        exit -401
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error) if not @porcelin
        csay("Unable to retrieve environment list",:error)
        exit -301
    end
    
    begin
        json_resp = JSON.parse(response.body)
        user_info = JSON.parse(json_resp['result'].to_s)
    rescue JSON::ParserError
        exit -400
    end

    if @porcelin
        print user_info
    else
        csay("User Info",:message)
        csay("Namespace: #{user_info['user_info']['namespace']}")
        csay("     UUID: #{user_info['user_info']['uuid']}")
        csay("  RHLogin: #{user_info['user_info']['rhlogin']}")
        csay("  ssh_key: #{user_info['user_info']['ssh_key']}")
    end
end
