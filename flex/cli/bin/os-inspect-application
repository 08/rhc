#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'openshift'

def usage
puts <<USAGE
== Synopsis

os-inspect-application: Inspect application details

== Usage

os inspect-application [options] [NAME]

-u|--username
    Redhat Login (RHN or OpenShift login with OpenShift Express access)

-p|--password
    Redhat Password

-t|--target flex|express
    The cloud platform the application is hosted on.
    
-e|--environment ENVIRONMENT_ID:
    The name or ID of the environment that hosts the application.

-v|--verbose
    Get application deployment history.
    
-h|--help
    Prints this message

NAME: The name or GUID of the application.
USAGE
end

opts = GetoptLong.new(
    ["--username",         "-u", GetoptLong::REQUIRED_ARGUMENT],
    ["--password",         "-p", GetoptLong::REQUIRED_ARGUMENT],
    ["--environment",      "-e", GetoptLong::REQUIRED_ARGUMENT],        
    ["--verbose",          "-v", GetoptLong::NO_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT],        
    ["--debug",                  GetoptLong::NO_ARGUMENT],          
    ["--sso",                    GetoptLong::REQUIRED_ARGUMENT],
    ["--porcelin",               GetoptLong::NO_ARGUMENT]                
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

if args['--help']
    usage
    exit
end

app_name = ARGV.shift
clone_dir = ARGV.shift
@debug = true if args['--debug']
debug "Application name: #{app_name}"

@porcelin = true if args['--porcelin']

args['--target'] = conf('default_target') || 'flex' if args['--target'].nil? or args['--target']==""
debug "Target platform #{args['--target']}"

if args['--target'] == 'flex'
    flex_server = conf('flex_server')
    cookie = args['--sso']
    if !cookie
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        csay("Logging into Openshift Flex as #{username}\n",:message) if not @porcelin
        cookie=Openshift.login(@http,username,password)
    end

    candidates=[]
    environment_id = args["--environment"]
    if environment_id
        csay("Retrieving environment details for environment #{environment_id}... ") if not @porcelin
        uri = URI.parse("#{flex_server}/rest/api")
        response = Openshift::Rest.get(@http, uri, nil, cookie, nil)
        case response
        when Net::HTTPSuccess
            csay("[OK]",:conf) if not @porcelin
        else
            debug "HTTP code: #{response.code}"
            debug response.body
            csay("[ERROR]",:error) if not @porcelin
            csay("Unable to contact Flex server",:error) if not @porcelin
            exit -301
        end
        data = JSON.parse(response.body)
        list_env_url = data['links']['list-clusters']

        uri = URI.parse("#{flex_server}/rest/#{list_env_url['href']}/#{environment_id}")
        response = Openshift::Rest.doHttp(@http, list_env_url['method'], uri, nil, cookie, nil)
        case response
        when Net::HTTPSuccess
            csay("[OK]",:conf) if not @porcelin
        else
            debug "HTTP code: #{response.code}"
            debug response.body
            csay("[ERROR]",:error) if not @porcelin
            csay("Unable to retrieve environment details.",:error) if not @porcelin
            exit -301
        end
        data = [JSON.parse(response.body)['cluster']]
    else
        csay("Retrieving environment details... ") if not @porcelin
        data = JSON.parse(`os-list-environments --sso "#{cookie}" --porcelin`)
    end

    environments = data
    environments.each{ |environment|
        debug environment['name']
        if environment['cluster-status'] == 'STARTED'
            csay("Retrieving application list for environment #{environment["name"]}... ") if not @porcelin
            uri = URI.parse("https://#{environment['dns']}:4242/api")
		    response = Openshift::Rest.get(@http, uri, nil, nil, {'user' => environment['username'], 'password' => environment['password']})
		    case response
		    when Net::HTTPSuccess
		    when Timeout::Error
		        csay("[ERROR]",:error) if not @porcelin
		        csay("Environment #{environment["name"]} is unreachable.",:error) if not @porcelin
		        next
		    end
		    api = JSON.parse(response.body)
		    unless api['version'].to_f >= 3.0
		        csay("Environment #{environment["name"]} is based on an older release of OpenShift Flex. Skipping.", :warn) if not @porcelin
		        next
		    end
           
            list_app_link = api['links']['list-applications']

            uri = URI.parse("https://#{environment['dns']}:4242/#{list_app_link['href']}")
            response = Openshift::Rest.doHttp(@http, list_app_link['method'], uri, nil, nil, {'user' => environment['username'], 'password' => environment['password']})
            case response
            when Net::HTTPSuccess
                csay("[OK]",:conf) if not @porcelin
            else
                debug "HTTP code: #{response.code}"
                debug response.body
                csay("[ERROR]",:error) if not @porcelin
                csay("Unable to retrieve application list.",:error) if not @porcelin
                exit -301
            end
            
            apps = JSON.parse(response.body)["applications"]
            apps.each{ |app|
                if args['--verbose']
                    csay("Retrieving application details... ") if not @porcelin
                    uri = URI.parse("https://#{environment['dns']}:4242/applications/#{app['guid']}/revisions")
                    response = Openshift::Rest.get(@http, uri, nil, nil, {'user' => environment['username'], 'password' => environment['password']})
                    case response
                    when Net::HTTPSuccess
                        csay("[OK]",:conf) if not @porcelin
                    else
                        debug "HTTP code: #{response.code}"
                        debug response.body
                        csay("[ERROR]",:error) if not @porcelin
                        csay("Unable to retrieve application details",:error)
                        exit -301
                    end
                    
                    data = JSON.parse(response.body)
                    app["revisions"] = data["revisions"]
                    app["revisions"].each{|rev| rev['datetime'] = Time.at(rev['timestamp'].to_f)}
                end
                
                if not app_name or (app["name"] == app_name or app["guid"] == app_name)
                    candidates += [{"environment"=>environment, "application"=>app}]
                end
            }
        else
            csay("Environment #{environment["name"]} is not currently started, skipping.",:warn) if not @porcelin
        end
    }
    
    if args["--porcelin"]
        print JSON.generate(candidates)
    else
        candidates.each{ |candidate|
            environment = candidate["environment"]
            app = candidate["application"]
    
            print "Environment information:\n"
            Openshift::Formatter.table(["Environment Id","Name","Cloud", "DNS", "Load balanced", "Location", "State"],
                  ['id','name','cloud-account-name', 'dns', 'loadbalanced','location','cluster-status'],
                  [16,15,20,40,20,15,10],
                  [environment])
            print "Application information:\n"
            Openshift::Formatter.table(["Application GUID","Application name", "Version", "State"],
              ['guid','name','version','status'],
              [39,20,7,20],
              [app],1)
            if app['revisions']
                print "    Application deployments:\n"  
                Openshift::Formatter.table(["Deployment #","Branch name", "Comments", "Timestamp", "Revision"],
                  ['number','name','comments','datetime','revision'],
                  [12,40,50,30,45],
                  app['revisions'],2)
            end
            print "\n"            
        }
    end
else
    csay("This feature is currently not implemented for Openshift Express applications.\n",:red)    
end
