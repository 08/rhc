#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'openshift'

def usage
    puts <<USAGE
== Synopsis

os-start-application: Restart an application.

== Usage

os start-application [options] [APP]

-u|--username USERNAME:
   Redhat Login (RHN or OpenShift login).

-p|--password PASSWORD:
   Redhat Password.

-t|--target flex|express
   Choose the cloud platform to clone the application from.

-e|--environment ID:
   The ID of the environment that is hosting the application. This is an optional 
   argument to disambiguate the application name. This argument only applies 
   to Openshift Flex environments

-h|--help:
   Prints this message

APP: The application name or application GUID
USAGE
end

begin
    opts = GetoptLong.new(
        ["--username",         "-u", GetoptLong::REQUIRED_ARGUMENT],
        ["--password",         "-p", GetoptLong::REQUIRED_ARGUMENT],
        ["--environment",      "-e", GetoptLong::REQUIRED_ARGUMENT],
        ["--help",             "-h", GetoptLong::NO_ARGUMENT],        
        ["--debug",                  GetoptLong::NO_ARGUMENT],                
        ["--sso",                    GetoptLong::REQUIRED_ARGUMENT]        
    )
rescue Exception => e
    puts e.message
end

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

app_name = ARGV.shift
@debug = true if args['--debug']

if args['--help'] or app_name.nil? or app_name == ""
    usage
    exit -101
end

args['--target'] = conf('default_target') || 'flex' if args['--target'].nil? or args['--target']==""
debug args['--target']

if args['--target'] == 'flex'
    flex_server = conf('flex_server')
    environment_id = args['--environment']
    cookie = args['--sso']
    
    if !cookie
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        csay("Logging into Openshift Flex as #{username}\n",:message)
        cookie=Openshift.login(@http,username,password)
    end

    candidates=nil
    begin
        environment_info = "--environment #{environment_id}" if environment_id
        csay("Loading application state... ")
        debug "Invoking os-inspect-application --sso \"#{cookie}\" #{environment_info} #{app_name} --porcelin "    
        candidates = JSON.parse(`os-inspect-application --sso \"#{cookie}\" #{environment_info} #{app_name} --porcelin`)
        csay("[OK]",:conf)
    rescue JSON::ParserError => e
        debug e.message
        csay("[ERROR]",:conf)        
        csay("Unable to load application data from server\n.",:error)
        exit -400
    end

    if candidates.size == 0
        csay("No application found with specified name or guid.\n",:error)
        usage
        exit -200
    end

    if candidates.size > 1
        csay("Ambiguous application. Please consider specifing environment id and/or application guid.\n",:error)
        usage
        exit -201
    end
    
    environment = candidates[0]["environment"]
    app = candidates[0]["application"]
    csay("Starting application... ")    
    uri = URI.parse("https://#{environment['dns']}:4242/applications/#{app['guid']}/state")
    response = Openshift::Rest.put(@http, uri, {"state" => "started"}, nil, {'user' => environment['username'], 'password' => environment['password']})
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf)
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error)
        csay("Unable to start application",:error)
    end
else
    csay("This feature is currently not implemented for Openshift Express applications.\n",:red)    
end
