#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'openshift'

def usage
puts <<USAGE
== Synopsis

os-deregister-cloud: Deregister a cloud account.

== Usage

os deregister-cloud [options] [NAME]

-u|--username
    Redhat Login (RHN or OpenShift login with OpenShift Express access)

-p|--password
    Redhat Password

-t|--target flex|express
    The cloud platform for the cloud account.
    
-h|--help
    Prints this message

NAME: The name or ID of the cloud to deregister.
USAGE
end

begin
    opts = GetoptLong.new(
        ["--username",         "-u", GetoptLong::REQUIRED_ARGUMENT],
        ["--password",         "-p", GetoptLong::REQUIRED_ARGUMENT],
        ["--help",             "-h", GetoptLong::NO_ARGUMENT],        
        ["--debug",                  GetoptLong::NO_ARGUMENT],        
        ["--sso",                    GetoptLong::REQUIRED_ARGUMENT],
        ["--porcelin",               GetoptLong::NO_ARGUMENT]    
    )
rescue Exception => e
    puts e.message
end

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

@debug = true if args['--debug']
args['--target'] = conf('default_target') || 'flex' if args['--target'].nil? or args['--target']==""
debug "Target platform #{args['--target']}"

if args['--help']
    usage
    exit
end

if args['--target'] == 'flex'
    flex_server = conf('flex_server')
    cloud_name   = ARGV.shift
    if not cloud_name
        csay("No cloud name or id was provided.", :error)
        exit
    end
    
    cookie = args['--sso']
    if !cookie
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        csay("Logging into Openshift Flex as #{username}\n",:message)
        cookie=Openshift.login(@http,username,password)
    end
    
    csay("Retrieving list of cloud accounts...")
    clouds = JSON.parse(`os-list-clouds --sso "#{cookie}" --porcelin`)
    
    clouds.each{ |cloud|
        if cloud["name"].strip == cloud_name.strip
            csay("Deregistering cloud ")
            csay("#{cloud["name"]} ",:emphasis)
            csay("... ")
            delete_link = cloud["links"]["delete"]
            uri = URI.parse("#{flex_server}/rest/#{delete_link["href"]}")
            response = Openshift::Rest.doHttp(@http, delete_link["method"], uri, nil, cookie, nil)
            case response
            when Net::HTTPSuccess
                csay("[OK]",:conf)
            else
                debug "HTTP code: #{response.code}"
                debug response.body
                csay("[ERROR]",:error)
                csay("Unable to deregister cloud account.",:error)
                exit -301
            end
            break
        end
    }
else
    csay("This feature is currently not implemented for Openshift Express applications.\n",:red)    
end
