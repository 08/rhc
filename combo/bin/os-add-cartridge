#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'openshift'

def usage
    puts <<USAGE
== Synopsis

os-add-cartridge: Adds a software cartridge and loads initial configuration 
into the application.

== Usage

os add-cartridge [options] APP CARTRIDGES

-u|--username USERNAME:
   Redhat Login (RHN or OpenShift login with OpenShift Flex access).

-p|--password PASSWORD:
   Redhat Password.

-e|--environment ID:
   The ID of the environment that is hosting the application. This is an optional
   argument to disambiguate the application name.

-h|--help:
   Prints this message

APP: The application name or application GUID

CARTRIDGES: Comma seperated list of cartridges to add to the application
USAGE
end

opts = GetoptLong.new(
    ["--username",         "-u", GetoptLong::REQUIRED_ARGUMENT],
    ["--password",         "-p", GetoptLong::REQUIRED_ARGUMENT],
    ["--environment",      "-e", GetoptLong::REQUIRED_ARGUMENT],
    ["--debug",                  GetoptLong::NO_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT],
    ["--sso",                    GetoptLong::REQUIRED_ARGUMENT],
    ["--target",           "-t", GetoptLong::REQUIRED_ARGUMENT]        
)
args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

flex_server = conf('flex_server')
app_name = ARGV.shift
environment_id = args['--environment']
@debug = true if args['--debug']
carts = ARGV.shift

if args['--help'] or app_name.nil? or app_name == "" or carts.nil? or carts == ""
    usage
    exit -101
end

args['--target'] = conf('default_target') || 'flex' if args['--target'].nil? or args['--target']==""
debug args['--target']

if args['--target'] == 'flex'
    cookie = args['--sso']
    if !cookie
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        csay("Logging into Openshift Flex as #{username}\n",:message)
        cookie=Openshift.login(@http,username,password)
    end
    
    candidates=nil
    begin
        environment_info = "--environment #{environment_id}" if environment_id
        debug "Invoking os-inspect-application --sso \"#{cookie}\" --porcelin #{environment_info} #{app_name}"
        candidates = JSON.parse(`os-inspect-application --sso \"#{cookie}\" --porcelin #{environment_info} #{app_name}`)
    rescue JSON::ParserError => e
        debug e.message
        csay("Unable to load application data from server\n.",:error)
        exit -400
    end
    
    if candidates.size == 0
        csay("No application found with specified name or guid.\n",:error)
        usage
        exit -200
    end
    
    if candidates.size > 1
        csay("Ambiguous application. Please consider specifing environment id and/or application guid.\n",:warn)
        usage
        exit -201
    end
    
    environment = candidates[0]["environment"]
    app = candidates[0]["application"]
    
    cart_data = nil
    begin
        debug "Invoking os-list-cartridges --sso \"#{cookie}\" --porcelin --environment #{environment["id"]} #{app["guid"]}"
        cart_data = JSON.parse(`os-list-cartridges --sso "#{cookie}" --porcelin --environment #{environment['id']} #{app['guid']}`)
    rescue JSON::ParserError => e
        debug e.message
        csay("Unable to retrieve a list of cartridges from the server\n.",:error)
        exit -400
    end
    
    avail = cart_data['available']
    installed = cart_data['installed']

    debug "hi 1\n"
    
    carts_to_install = []
    new_carts = carts.split(",")
    new_carts.each{ |ncart|
        cart_obj = nil
        avail.each{ |cart|
            if cart["name"] == ncart
                cart_obj = cart
                break
            end
        }
        if cart_obj
            debug "Adding cart:"
            debug cart_obj
            carts_to_install += [cart_obj]
        else
            csay("Unknown cartridge #{ncart}. Please verify the name against the list of available cartridges\n",:warn)
        end
    }
    
    say("Configuring dependencies for application ")
    csay("#{app['name']} ",:emphasis)
    say("... ")
    uri = URI.parse("https://#{environment['dns']}:4242/applications/#{app['guid']}/cartridges")
    response = Openshift::Rest.put(@http, uri, { "cartridges" => JSON.generate(carts_to_install+installed) },
            nil, {'user' => environment['username'], 'password' => environment['password']})
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf)
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error)
        messages = JSON.parse(response.body)
        csay("Unable to set application cartridges due to error. Message: #{messages['messages'][0]['description']}",:error)
        exit -301
    end

    say("Committing changes to git... ")    
    uri = URI.parse("https://#{environment['dns']}:4242/applications/#{app['guid']}/tree/.vostok/revisions")
    response = Openshift::Rest.post(@http, uri, {"untracked" => "true"}, nil, {'user' => environment['username'], 'password' => environment['password']})
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf)
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error)
        messages = JSON.parse(response.body)
        csay("Unable to commit configuration file changes. Message: #{messages['messages'][0]['description']}",:error)
        exit -301
    end
else
    csay("Application dependencies can only be added for the Openshift Flex application.\n",:red)    
end
