#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'openshift'

def usage
puts <<USAGE
== Synopsis

os-create-environemnt: Creates a new OpenShift Express or OpenShift Flex environemnt.

== Usage

os create-environment [options] [NAME]

-u|--username
    Redhat Login (RHN or OpenShift login with OpenShift Express access)

-p|--password
    Redhat Password

-t|--target flex|express
    Choose the cloud platform to create the environment on.
    
-h|--help
    Prints this message
   
=== Openshift Flex options

-c|--cloud
    The cloud ID account to create the environment. (See os-list-clouds)
    
-l|--location         
    The cloud provider specific location.

--num-nodes
    Number of nodes to start for the environment.

--min-memory
    Minumim memory for each node.
    
--min-disk
    Minumim disk size for each node.

--load-balanced
    Enables load-balancing for the envionment.

--64
    Create a 64 bit instance

=== Openshift Express options
    
-d|--domain         
    The domain namespace for the environment. This argument is only valid for Express

NAME: The name of the new environment
USAGE
end

def create_flex_cloud(args,name,cookie)
    args.delete('--target')
    args.delete('--username')
    args.delete('--password')
    args.delete('--cloud')
    args.delete('--sso')          
    args = JSON.generate(args)
    args.gsub!(/(["\\])/, '\\\\\1')
    exec( "os-register-cloud --sso \"#{cookie}\" --new-environment \"#{args} #{name}\"" )
end

begin
    opts = GetoptLong.new(
        ["--username",         "-u", GetoptLong::REQUIRED_ARGUMENT],
        ["--password",         "-p", GetoptLong::REQUIRED_ARGUMENT],
        ["--target",           "-t", GetoptLong::REQUIRED_ARGUMENT],
        ["--cloud",            "-c", GetoptLong::REQUIRED_ARGUMENT],
        ["--location",         "-l", GetoptLong::REQUIRED_ARGUMENT],
        ["--domain",           "-d", GetoptLong::REQUIRED_ARGUMENT],                                
        ["--num-nodes",              GetoptLong::REQUIRED_ARGUMENT],                                        
        ["--min-memory",             GetoptLong::REQUIRED_ARGUMENT],                                                
        ["--min-disk",               GetoptLong::REQUIRED_ARGUMENT],                                                        
        ["--load-balanced",          GetoptLong::NO_ARGUMENT],                                                                
        ["--sso",                    GetoptLong::REQUIRED_ARGUMENT],
        ["--porcelin",               GetoptLong::NO_ARGUMENT],
        ["--new-application",        GetoptLong::REQUIRED_ARGUMENT],
        ["--64",                     GetoptLong::NO_ARGUMENT],        
        ["--debug",                  GetoptLong::NO_ARGUMENT],        
        ["--help",             "-h", GetoptLong::NO_ARGUMENT]        
    )
rescue Exception => e
    puts e.message
end

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

if args['--help']
    usage
    exit
end

name = ARGV.shift
@debug = true if args['--debug']
debug "Environment name: #{name}"

args['--target'] = conf('default_target') || 'flex' if args['--target'].nil? or args['--target']==""
debug "Target platform #{args['--target']}"

if args['--target'] == 'flex'
    flex_server = conf('flex_server')
    cookie = args['--sso']
    if !cookie
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        csay("Logging into Openshift Flex as #{username}\n",:message)
        cookie=Openshift.login(@http,username,password)
        #Openshift::add_rhlogin_config(username)
    end
    
    clouds = JSON.parse(`os-list-clouds --sso "#{cookie}" --porcelin`)
    cloud_id = args['--cloud']
    cloud_candidates = clouds.find_all{ |cloud| cloud["id"].to_s == cloud_id.to_s }
    if cloud_id and cloud_candidates.size < 1
        csay("Cloud account with id #{cloud_id} was not found",:warn)
        cloud_id = nil
    end
    
    if not cloud_id
        if clouds.size == 0
            create_flex_cloud(args,name,cookie)
        end
        
        menu = clouds + [{'id'=>'n', 'name'=>'New cloud'}] 
        csay("Please select a cloud account for the new environment or select #{clouds.size+1} to create a new cloud account",:message)
        Openshift::Formatter.table(["Cloud Id","Name","Type"],
                ['id','name','type'],
                [10,15,20],
                menu)
        cloud_id = Openshift::IO.prompt("Cloud ID",menu.map{|c| c['id'].to_s})
    end
    create_flex_cloud(args,name,cookie) if cloud_id.downcase == 'n'
    
    cloud_candidates = clouds.find_all{ |cloud| cloud["id"].to_s == cloud_id.to_s }
    cloud = cloud_candidates[0]

    print "Creating a new Openshift Flex cloud environment\n"
    if not Openshift::Validation.check_field(name,"environment name",8)
        name = Openshift::IO.prompt("Environment name",nil,lambda{|p| Openshift::Validation.check_field(p,"environment name",8)},true)
    end
    location = args['--location'] || 'us-east-1'
    env_pass = Openshift::IO.prompt("Admin password",nil,lambda{|p| Openshift::Validation.check_field(p,"password")},true,false)
    num_nodes = args['--num-nodes'] || "1"
    min_memory = args['--min-memory'] || "1024"
    min_disk_size = args['--min-disk'] || "10"

    if args['--load-balanced']
        loadbalanced = "true"
    else
        loadbalanced = "false"
    end

    csay("Contacting Openshift Flex server... ") if not @porcelin
    uri = URI.parse("#{flex_server}/rest/api")
    response = Openshift::Rest.get(@http, uri, nil, cookie, nil)
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf) if not @porcelin
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error) if not @porcelin
        csay("Unable to contact Flex server",:error)
        exit -301
    end
    data = JSON.parse(response.body)
    create_env_url = data['links']['create-cluster']
   
    uri = URI.parse("#{flex_server}/rest/#{create_env_url['href']}")
    csay("Creating a new environment can take upto 5 minutes.",:message)
    csay("Creating the environment... ")

    architecture = 32
    architecture = 64 if args['--64']

    response = Openshift::Rest.doHttp(@http, create_env_url['method'], uri, {"cloud-account-id" => cloud['id'], "name" => name, "location" => location, "admin-password" => env_pass,
        "min-cores-per-node" => "1", "min-memory-per-node" => min_memory, "loadbalanced" => loadbalanced, "number-of-nodes" => num_nodes, "architecture" => architecture }, cookie, nil)

    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf)
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error)
        exit -301
    end
    data = JSON.parse(response.body)
    environment = data['cluster']
    
    ssh_key = Openshift::SSH::gen_ssh_keys(@libra_kfile,@libra_kpfile)
    csay("Uploading SSH key to environment... ")
    uri = URI.parse("https://#{environment['dns']}:4242/security/keys")
    response = Openshift::Rest.post(@http, uri, {'type'=>'ssh-rsa','identifier'=>'', 'key'=>ssh_key}, nil, {'user' => environment['username'], 'password' => environment['password']})
    case response
    when Net::HTTPSuccess
        csay("[OK]",:conf)
    else
        debug "HTTP code: #{response.code}"
        debug response.body
        csay("[ERROR]",:error)
        csay("Unable to update ssh keys on environment.",:error)
        exit -301
    end
    
    if args['--porcelin']
        print JSON.generate(environment)
    else
        csay("Openshift Flex environment created",:message)
        Openshift::Formatter.table(["Environment Id","Name","Cloud", "DNS", "Load balanced", "Location", "State"],
              ['id','name','cloud-account-name', 'dns', 'loadbalanced','location','cluster-status'],
              [15,15,20,40,20,15,10],
              [environment])
    end
    
    if args['--new-application']
        new_args = JSON.parse(args['--new-application'])
        cmd = "os-create-application --target flex --environment #{environment['id']} --sso \"#{cookie}\" "
        new_args.each{ |k,v|
            cmd += "#{k} \"#{v}\" "
        }
        exec(cmd)
    end
else #express
    sso_data = args['--sso']
    if !sso_data
        username = args['--username'] || conf("username") || Openshift::IO.prompt("Redhat username",[],Openshift::Validation.method(:check_login))
        password = args['--password'] || Openshift::IO.prompt("Redhat password",nil,nil,true,false)
        sso_data = JSON.generate({"username"=>username, "password"=>password})
    else
        sso_data = JSON.parse(sso_data)
        username = sso_data['username']
        password = sso_data['password']
    end
    
    ssh_key = Openshift::SSH::gen_ssh_keys(@libra_kfile,@libra_kpfile)
    
    csay("Creating new Openshift Express environment... ")
    data = {'namespace' => opt['namespace'], 'rhlogin' => username, 'ssh' => ssh_key}
    json_data = JSON.generate(data)
    url = URI.parse("https://#{libra_server}/broker/domain")
    params = {'json_data' => json_data, 'password' => password}
    response = Openshift::Rest.post(@http, uri, params)
    case response
    when Net::HTTPNotFound
        csay("[ERROR]",:error)
        csay("RHCloud server not found.  You might want to try updating your os client tools.",:error)
        exit -218
    when Net::HTTPSuccess
        csay("[OK]",:conf)
    else
        csay("[ERROR]",:error)
        csay("There was a problem communicating with the server. Response message: #{response.code}",:error)
        csay("If you were disconnected it is possible the operation finished without being able to report success.")
        csay("You can use os-list-environments and os-inspect-application to learn about the status of your")
        csay("Openshift Express environment and application(s).")
        exit -219
    end

    json_resp = JSON.parse(response.body)
    json_rhlogininfo = JSON.parse(json_resp['data'])
    Openshift::add_rhlogin_config(json_rhlogininfo['rhlogin'], json_rhlogininfo['uuid'])
    
    puts <<EOF
 Creation successful
 
 You may now create an application.
 
EOF
end
